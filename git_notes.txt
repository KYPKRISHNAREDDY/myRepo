git config --global .name ""

git status
git init
git clone
git diff to see the changes made to old file

Working Directory(Temp changes)-> Staging Index(Added) -> Repository(Committed)

git log details about latest to old commits
git log -3  latest 3 commits
git log -p shows diff also(Changes done will be shown)
git log --oneline shows only msgs during committing
git log --stat to show file names which got changed
git show commitId shows changes made in that particular Commit


git add filename to track changes in file
git commit to bring it to repository from staging area


commit head moves to latest commit
git diff to see changes made
git restore file.txt to restore the file to the prev version at head 


to not track some files
create .gitignore file and add *.txt to ignore tracking that file
so Now the change wont be no more visible in git status
you can add filename or path also in that .gitignore file which has to be ignored from tracking


git branch 
to show list of branches

git checkout branchname to switch branch
and do the required changes and once final code is ready
you can merge it to master branch .So change it to master Branch
and use git merge branch_name
and delete old branch using git branch -d branch_name


to merge 2nd branch to master there'll be conflicts,so you will manually edit those changes after merging 
and then you will add these changes to staging area and commit in master branch


Tagging
git tag -a Name MasterCommitID -m"MEssage"
To delete dag
git tag -d tagName

Add and commit at same time :
git commit -am "Message"


git stash when your friend and you working on the same file making same line changes 
So you'll be storing it in Stash Area before pulling it
git stash list -> to see git stash list
Now you can pull the latest file into your local repo
then git stash apply to apply your changes
and resolve manually then commit the changes


Undo Commit
git revert commitId
then esc->:->wq
commit will be reverted back
These will be shown in the git log

Git Reset
to Not show them in history : git reset --soft commitID

git reset --soft  : changes will be shown as staged ,Using this is safe
	    --mixed : all changes will be shown as modifications and will move back to that another commit
	    --hard : all the local changes discarded after moving back to another commit
